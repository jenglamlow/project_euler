# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?


from math import sqrt


def num_of_divisor(n):
    count = 0
    for i in range(1, int(sqrt(n))):
        if n % i == 0:
            count += 1
            if n / i != i:
                count += 1
    return count


def answer():
    n = 1
    N = 1
    div = num_of_divisor(n)
    while div < 500:
        N += 1
        n = N * (N + 1) / 2
        div = num_of_divisor(n)

    return n

print(answer())


# def solution():
#     n = 3
#     Dn = 2
#     cnt = 0

#     while cnt <= 500:
#         n += 1
#         n1 = n
#         if n1 % 2 == 0:
#             n1 = n1/2
#         Dn1 = 1

#         for i in range(1,len(P)):
#             if P[i] * P[i] > n1:
#                 Dn1 = 2 * Dn1

#             exponent = 1
#             while n1 % P[i] == 0:
#                 exponent+=1
#                 n1 = n1/P[i]

#             if exponent > 1:
#                 Dn1 = Dn1 * exponent
#             if n1 = 1:
#                 break
#         cnt = Dn * Dn1
#         Dn = Dn1

#     return n * (n - 1) / 2
